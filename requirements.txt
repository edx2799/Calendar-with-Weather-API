flask
Flask-SQLAlchemy
flask-login
@load base/protocols/conn
@load base/protocols/http
@load base/protocols/ftp
@load base/protocols/ssl

module CustomTraffic;

export {
    redef record Conn::Info += {
        Stime: time;
        Ltime: time;
        dur: interval;
        proto: string;
        state: string;
        sbytes: count;
        dbytes: count;
        spkts: count;
        dpkts: count;
        sttl: count;
        dttl: count;
        
        swin: count;
        dwin: count;
        stcpb: count;
        dtcpb: count;
        sjit: interval;
        djit: interval;
        sintpkt: interval;
        dintpkt: interval;

        tcprtt: interval;
        synack: interval;
        ackdat: interval;

        service: string;
        ct_flw_http_mthd: count;
        is_ftp_login: bool;
        ct_ftp_cmd: count;
        
        ct_srv_src: count;
        ct_srv_dst: count;
        ct_dst_ltm: count;
        ct_src_ltm: count;
        ct_src_dport_ltm: count;
        ct_dst_sport_ltm: count;
        ct_dst_src_ltm: count;

        attack_cat: string;
    };
}

# Event for capturing connection state
event connection_state_remove(c: connection) {
    c$info$Stime = c$start_time;
    c$info$Ltime = network_time();
    c$info$dur = c$duration;
    c$info$proto = c$id$proto;
    c$info$state = c$history;
    
    c$info$sbytes = c$orig_bytes;
    c$info$dbytes = c$resp_bytes;
    c$info$spkts = c$orig_pkts;
    c$info$dpkts = c$resp_pkts;
    
    c$info$sttl = c$orig_ttl;
    c$info$dttl = c$resp_ttl;

    c$info$swin = c$orig_window;
    c$info$dwin = c$resp_window;
    
    c$info$sjit = c$orig_ip_bytes / (c$orig_pkts + 1);
    c$info$djit = c$resp_ip_bytes / (c$resp_pkts + 1);
    
    c$info$sintpkt = c$duration / (c$orig_pkts + 1);
    c$info$dintpkt = c$duration / (c$resp_pkts + 1);

    if (c$id$proto == "tcp") {
        c$info$tcprtt = c$rtt;
        c$info$synack = c$syn_time;
        c$info$ackdat = c$ack_time;
    }

    if (c$service != "") {
        c$info$service = c$service;
    }

    Log::write(CustomTraffic::LOG, c$info);
}

event http_request(c: connection, method: string, host: string, uri: string) {
    c$info$ct_flw_http_mthd += 1;
}

event ftp_login(c: connection, user: string, success: bool) {
    if (success) {
        c$info$is_ftp_login = T;
    }
}

event ftp_command(c: connection, command: string, arg: string) {
    c$info$ct_ftp_cmd += 1;
}

event zeek_init() {
    Log::create_stream(CustomTraffic::LOG, [$columns=Conn::Info]);
}

